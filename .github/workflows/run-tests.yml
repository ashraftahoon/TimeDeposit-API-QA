name: Run API Tests with Backend Source and EF Migrations

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: modealf
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: time_deposit_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d time_deposit_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkout backend source code
        uses: actions/checkout@v3
        with:
          repository: Modealf/TimeDepositAPI
          path: backend

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Setup Java for Maven
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Restore backend dependencies
        working-directory: ./backend
        run: dotnet restore

      - name: Delete old EF migrations
        working-directory: ./backend
        run: |
          rm -rf Migrations
          echo "Old migrations deleted"

      - name: Create fresh EF migration
        working-directory: ./backend
        run: dotnet ef migrations add InitialCreate
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=time_deposit_db;Username=modealf;Password=pass"

      - name: Run EF Core Migrations
        working-directory: ./backend
        run: dotnet ef database update
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=time_deposit_db;Username=modealf;Password=pass"

      - name: Start Backend API
        working-directory: ./backend
        run: dotnet run --no-build --urls "http://*:8080" &

      - name: Wait for backend to be healthy
        run: |
          for i in {1..5}; do
            if curl -s http://localhost:8080/health | grep -q "Healthy"; then
              echo "Backend is healthy!"
              break
            fi
            echo "Waiting for backend to be ready..."
            sleep 3
          done

      - name: Run API Tests
        id: run-tests
        run: |
          mvn clean test
          # Check if allure results were generated
          if [ -d "target/allure-results" ]; then
            echo "::set-output name=has_results::true"
          else
            echo "::warning::No Allure results were generated"
            echo "::set-output name=has_results::false"
          fi

      - name: Install Allure Commandline
        if: steps.run-tests.outputs.has_results == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install allure

      - name: Generate Allure Report
        if: steps.run-tests.outputs.has_results == 'true'
        run: |
          allure generate target/allure-results -o target/allure-report --clean

      - name: Archive Allure Report
        if: steps.run-tests.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report
          retention-days: 5

      - name: Debug file structure
        if: steps.run-tests.outputs.has_results == 'false'
        run: |
          echo "Contents of target directory:"
          ls -la target || echo "No target directory found"
          echo "Contents of current directory:"
          ls -la