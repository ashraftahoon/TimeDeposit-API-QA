name: Run API Tests with Docker Hub Login

on:
  push:
    branches:
      - main
      - test-actions
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Docker network
        run: docker network create timedeposit-net || true

      - name: Start Postgres container
        run: |
          docker run -d --rm --name test-db \
            --network timedeposit-net \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=1234 \
            -e POSTGRES_DB=timedeposit \
            -p 5432:5432 \
            postgres:15

      - name: Pull backend image
        run: docker pull ashraf354/timedeposit-backend:latest

      - name: Start backend container
        run: |
          docker run -d --rm --name backend \
            --network timedeposit-net \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -e ConnectionStrings__DefaultConnection="Host=test-db;Port=5432;Database=timedeposit;Username=postgres;Password=1234;" \
            -p 8080:8080 \
            ashraf354/timedeposit-backend:latest

      - name: Setup .NET SDK for EF Migrations
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Run EF Core Migrations
        working-directory: ./TimeDepositAPI.csproj  # <-- set path to your backend .csproj folder
        run: |
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:$HOME/.dotnet/tools"
          dotnet ef database update --connection "Host=test-db;Port=5432;Database=timedeposit;Username=postgres;Password=1234"

      - name: Wait for backend to be healthy
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/health | grep -q "Healthy"; then
              echo "✅ Backend is healthy!"
              break
            fi
            echo "⏳ Waiting for backend to be ready..."
            sleep 5
          done

      - name: Run API Tests
        run: mvn clean test
